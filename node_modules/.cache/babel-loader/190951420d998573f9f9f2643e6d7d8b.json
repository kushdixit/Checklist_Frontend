{"ast":null,"code":"import axioPath from 'api/axioPath';\nimport { UPDATE_DATA } from 'redux/actions/action_types';\nexport const getChecklistBySubcategory = subcategoryId => dispatch => {\n  return axioPath.get('v1/Task/GetChecklistBySubcategory/' + subcategoryId).then(response => {\n    dispatch({\n      type: UPDATE_DATA,\n      payload: response.data\n    });\n    return {\n      error: false,\n      data: response.data\n    };\n  }).catch(ex => {\n    if (typeof ex == 'string') {\n      return {\n        ex: {\n          message: ex\n        }\n      };\n    }\n\n    return {\n      error: true,\n      data: ex\n    };\n  });\n};\nexport const addNewTask = data => dispatch => {\n  return axioPath.post('v1/Task/tasks', data, {\n    hideLoader: false // headers: {\n    //   Authorization: `Bearer ${token}`,\n    // },\n\n  }).then(response => {\n    dispatch({\n      type: UPDATE_DATA,\n      payload: response.data\n    });\n    return {\n      error: false,\n      data: response.data\n    };\n  }).catch(ex => {\n    if (typeof ex == 'string') {\n      return {\n        ex: {\n          message: ex\n        }\n      };\n    }\n\n    return {\n      error: true,\n      data: ex\n    };\n  });\n};","map":{"version":3,"names":["axioPath","UPDATE_DATA","getChecklistBySubcategory","subcategoryId","dispatch","get","then","response","type","payload","data","error","catch","ex","message","addNewTask","post","hideLoader"],"sources":["/Users/satvinder/Desktop/Projects/Checklist/Checklist/Checklist_Frontend/src/redux/actions/checklist/index.js"],"sourcesContent":["import axioPath from 'api/axioPath'\nimport {\n    UPDATE_DATA,\n} from 'redux/actions/action_types';\n\nexport const getChecklistBySubcategory = (subcategoryId) => (dispatch) => {\n  return axioPath\n    .get('v1/Task/GetChecklistBySubcategory/'+subcategoryId)\n    .then((response) => {\n      dispatch({ type: UPDATE_DATA, payload: response.data })\n      return { error: false, data: response.data }\n    })\n    .catch((ex) => {\n      if (typeof ex == 'string') {\n        return { ex: { message: ex } }\n      }\n      return { error: true, data: ex }\n    })\n}\nexport const addNewTask = (data) => (dispatch) => {\n  return axioPath\n    .post('v1/Task/tasks', data, {\n      hideLoader: false,\n      // headers: {\n      //   Authorization: `Bearer ${token}`,\n      // },\n    })\n    .then((response) => {\n      dispatch({ type: UPDATE_DATA, payload: response.data });\n      return { error: false, data: response.data };\n    })\n    .catch((ex) => {\n      if (typeof ex == 'string') {\n        return { ex: { message: ex } };\n      }\n      return { error: true, data: ex };\n    });\n}\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,SACIC,WADJ,QAEO,4BAFP;AAIA,OAAO,MAAMC,yBAAyB,GAAIC,aAAD,IAAoBC,QAAD,IAAc;EACxE,OAAOJ,QAAQ,CACZK,GADI,CACA,uCAAqCF,aADrC,EAEJG,IAFI,CAEEC,QAAD,IAAc;IAClBH,QAAQ,CAAC;MAAEI,IAAI,EAAEP,WAAR;MAAqBQ,OAAO,EAAEF,QAAQ,CAACG;IAAvC,CAAD,CAAR;IACA,OAAO;MAAEC,KAAK,EAAE,KAAT;MAAgBD,IAAI,EAAEH,QAAQ,CAACG;IAA/B,CAAP;EACD,CALI,EAMJE,KANI,CAMGC,EAAD,IAAQ;IACb,IAAI,OAAOA,EAAP,IAAa,QAAjB,EAA2B;MACzB,OAAO;QAAEA,EAAE,EAAE;UAAEC,OAAO,EAAED;QAAX;MAAN,CAAP;IACD;;IACD,OAAO;MAAEF,KAAK,EAAE,IAAT;MAAeD,IAAI,EAAEG;IAArB,CAAP;EACD,CAXI,CAAP;AAYD,CAbM;AAcP,OAAO,MAAME,UAAU,GAAIL,IAAD,IAAWN,QAAD,IAAc;EAChD,OAAOJ,QAAQ,CACZgB,IADI,CACC,eADD,EACkBN,IADlB,EACwB;IAC3BO,UAAU,EAAE,KADe,CAE3B;IACA;IACA;;EAJ2B,CADxB,EAOJX,IAPI,CAOEC,QAAD,IAAc;IAClBH,QAAQ,CAAC;MAAEI,IAAI,EAAEP,WAAR;MAAqBQ,OAAO,EAAEF,QAAQ,CAACG;IAAvC,CAAD,CAAR;IACA,OAAO;MAAEC,KAAK,EAAE,KAAT;MAAgBD,IAAI,EAAEH,QAAQ,CAACG;IAA/B,CAAP;EACD,CAVI,EAWJE,KAXI,CAWGC,EAAD,IAAQ;IACb,IAAI,OAAOA,EAAP,IAAa,QAAjB,EAA2B;MACzB,OAAO;QAAEA,EAAE,EAAE;UAAEC,OAAO,EAAED;QAAX;MAAN,CAAP;IACD;;IACD,OAAO;MAAEF,KAAK,EAAE,IAAT;MAAeD,IAAI,EAAEG;IAArB,CAAP;EACD,CAhBI,CAAP;AAiBD,CAlBM"},"metadata":{},"sourceType":"module"}